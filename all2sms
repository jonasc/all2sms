#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from argparse import ArgumentParser
import os
import logging as log
import stat
import sys
from configparser import ConfigParser
import threading
import re

__version__ = '0.1.0'


class Backend(object):
    backends = []

    @property
    def __name__(self):
        return str(self)

    def debug(self, message, *args, **kwargs):
        log.debug(str(self) + ': ' + message, *args, **kwargs)

    def info(self, message, *args, **kwargs):
        log.info(str(self) + ': ' + message, *args, **kwargs)

    def warning(self, message, *args, **kwargs):
        log.warning(str(self) + ': ' + message, *args, **kwargs)

    def error(self, message, *args, **kwargs):
        log.error(str(self) + ': ' + message, *args, **kwargs)

    def critical(self, message, *args, **kwargs):
        log.critical(str(self) + ': ' + message, *args, **kwargs)

    def send(self, message):
        Backend._send(message, self.backends)

    def __init__(self, name=None):
        import queue

        if name is None:
            name = self._default_name()

        self.name = name
        self._running = True

        self._queue = queue.Queue()
        self._thread = threading.Thread(target=self.thread, name=str(self))
        self._thread.start()

        Backend.backends.append(self)
        self.debug('Backend.__init__: appended %s', self)

    def _default_name(self):
        raise NotImplementedError

    def _deliver(self, message):
        raise NotImplementedError('subclass has to implement deliver.')

    def _finalize(self):
        pass

    def join():
        log.debug('Backend.join')
        for backend in Backend.backends:
            backend._thread.join()

    def _kill(self):
        pass

    def thread(self):
        import queue
        while self._running:
            try:
                message = self._queue.get(timeout=1)
                self._deliver(message)
            except queue.Empty:
                pass

    def _send(message, backends):
        message = message.strip()
        log.debug('Backend._send: sending %s', message.replace('\n', '\n    '))
        for backend in Backend.backends:
            if backends is None or backend.name in backends:
                backend._queue.put(message)

    def end():
        log.debug('Backend.end')
        for backend in Backend.backends:
            backend._running = False
            backend._kill()
            backend._finalize()

    def __str__(self):
        return '%s[%s]' % (self.__class__.__name__, self.name)


class DummyBackend(Backend):
    def _deliver(self, message):
        log.info('Dummy.deliver: Delivering message')

    def _default_name(self):
        return 'dummy'


class SmsModemBackend(Backend):
    def __init__(self, port, number, baudrate=115200, name=None):
        if name is None:
            name = port
        super(SmsModemBackend, self).__init__(name)

        from gsmmodem import GsmModem

        self.number = number
        self.port = port
        self.baudrate = int(baudrate)
        self.modem = GsmModem(self.port, self.baudrate)
        self.modem.connect()
        self.info('Connected to gsm modem at %s @ %d', self.port, self.baudrate)

    def _deliver(self, message):
        self.info('Sending message to %s', self.number)
        self.smsTextMode = False
        self.modem.sendSms(self.number, message)

    def _finalize(self):
        self.debug('Closing connection to modem')
        self.modem.close()


class Watcher(object):
    watchers = []

    def debug(self, message, *args, **kwargs):
        log.debug(str(self) + ': ' + message, *args, **kwargs)

    def info(self, message, *args, **kwargs):
        log.info(str(self) + ': ' + message, *args, **kwargs)

    def warning(self, message, *args, **kwargs):
        log.warning(str(self) + ': ' + message, *args, **kwargs)

    def error(self, message, *args, **kwargs):
        log.error(str(self) + ': ' + message, *args, **kwargs)

    def critical(self, message, *args, **kwargs):
        log.critical(str(self) + ': ' + message, *args, **kwargs)

    def send(self, message):
        Backend.send(message, self.backends)

    def __init__(self, name, backends=None):
        self._running = True
        self.name = name
        self.backends = backends

        self._thread = threading.Thread(target=self.thread, name=str(self))
        self._thread.start()
        Watcher.watchers.append(self)
        self.debug('Watcher.__init__: appended %s', self)

    def join():
        log.debug('Watcher.join')
        for watcher in Watcher.watchers:
            watcher._thread.join()

    def kill():
        log.debug('Watcher.kill')
        for watcher in Watcher.watchers:
            watcher._running = False
            watcher._kill()

    def _kill(self):
        pass

    def thread(self):
        raise NotImplementedError('Watcher subclass has to implement thread.')

    def __str__(self):
        return '%s[%s]' % (self.__class__.__name__, self.name)


class OtpWatcher(Watcher):
    def __init__(self, command, name='otp'):
        self.command = command.split()

        super(OtpWatcher, self).__init__(name)

    def thread(self):
        import subprocess
        import select
        self.process = subprocess.Popen(self.command,
                                        stdout=subprocess.PIPE,
                                        universal_newlines=True)
        old_otp = ''
        while self._running:
            if self.process.poll() is not None:
                self.process = subprocess.Popen(self.command,
                                                stdout=subprocess.PIPE,
                                                universal_newlines=True)

            # Try to read from stdout
            reads, _, _ = select.select([self.process.stdout], [], [], 1)
            if reads == []:
                continue

            otp = self.process.stdout.readline().strip()
            if otp == old_otp or otp == '':
                continue
            old_otp = otp
            self.send('OTP: ' + otp)

    def _kill(self):
        if self.process.poll() is None:
            try:
                self.process.kill()
            except:
                pass


class ImapClientWatcher(Watcher):
    def __init__(self, user, password, host, name, port=993, excludedirs='',
                 **kwargs):
        from imapclient import IMAPClient
        self.host = host
        self.user = user
        self.conn = IMAPClient(host=host, port=port, ssl=True)
        self.conn.login(user, password)
        self.excludedirs = excludedirs.split()

        super(ImapClientWatcher, self).__init__(name, **kwargs)

    @staticmethod
    def _decode_header(h):
        import email
        return ''.join(map(
            lambda x: x[0].decode(
                'utf-8' if x[1] is None else x[1]
            ) if isinstance(x[0], bytes) else x[0],
            email.header.decode_header(h)
        ))

    def thread(self):
        import time
        import email

        first_run = True
        old_unseen = set()
        unseen = set()
        while self._running:
            time.sleep(1)
            if not self._running:
                break

            old_unseen = unseen.copy()
            unseen = set()
            mapping = dict()

            for flags, _, folder in self.conn.list_folders():
                if folder in self.excludedirs:
                    continue

                self.conn.select_folder(folder, readonly=True)
                ids = self.conn.search('(UNSEEN)')
                if ids == []:
                    continue
                result = self.conn.fetch(ids, ['RFC822'])
                for uid, data in result.items():
                    unseen.add(uid)
                    mapping[uid] = (folder, data['RFC822'])

            if first_run:
                first_run = False
                self.debug('ready')
                continue

            difference = unseen - old_unseen
            if difference == set():
                continue

            for uid in difference:
                folder, rfc822 = mapping[uid]
                mail = email.message_from_string(rfc822)
                subject = self._decode_header(mail['subject'])
                subject = re.sub(r'\s+', ' ', subject)
                fr = self._decode_header(mail['from'])
                fr = re.sub(r'\s+', ' ', fr)
                content = ''
                for part in mail.walk():
                    if part.get_content_type() == 'text/plain':
                        content = part.get_payload(decode=True).decode(
                            part.get_content_charset())
                        break
                    if part.get_content_type() == 'multipart/encrypted':
                        content = '<encrypted message>'

                lines = content.splitlines()
                lines.reverse()
                while lines and (lines[0].startswith('>') or lines[0] == ''):
                    lines.pop(0)
                for i, line in enumerate(lines):
                    if re.match(r'^(-+|_+)$', line.strip()):
                        lines = lines[i+1:]
                        break
                lines.reverse()
                content = '\r\n'.join(lines)

                message = '{}/{}\r\n{}\r\n{}\r\n\r\n{}'.format(self.name,
                                                               folder, fr,
                                                               subject, content)
                self.send(message)

    def _kill(self):
        try:
            self.conn.close_folder()
            self.debug('Closed folder')
        except:
            pass

        try:
            self.conn.logout()
            self.debug('Logged out', extra=dict(threadName=str(self)))
        except:
            pass


def main():
    #===========================================================================
    # Argument parsing
    #===========================================================================
    argparser = ArgumentParser(
        description='Monitor everything and notify mobile phone via SMS',
        add_help=False
    )
    # Getting help
    argparser.add_argument(
        '--help',
        action='help',
        help='show this help message and exit'
    )
    # Specifying config file
    argparser.add_argument(
        '-c', '--config',
        default='${XDG_CONFIG_HOME}/all2sms/all2sms.cfg',
        help='set the config file (default: %(default)s)'
    )
    # Logging options
    group_logging = argparser.add_argument_group('logging and output settings')
    group_logging.add_argument(
        '-l', '--log-file',
        default='${XDG_DATA_HOME}/all2sms/all2sms.log',
        help='set the log file (default: %(default)s)'
    )
    group = group_logging.add_mutually_exclusive_group()
    group.add_argument(
        '-v', '--verbose',
        dest='log_level',
        action='store_const',
        const=log.DEBUG,
        default=log.INFO,
        help='be verbose'
    )
    group.add_argument(
        '-q', '--quiet',
        dest='log_level',
        action='store_const',
        const=log.WARNING,
        help='don\'t output anything'
    )
    # Version
    argparser.add_argument(
        '--version',
        action='version',
        version='%(prog)s ' + __version__,
        help='show version information and exit'
    )

    # Parse the arguments
    args = argparser.parse_args()

    # Expand path variables and make paths absolute
    args.config = os.path.expandvars(args.config)
    if args.config.startswith('${XDG_CONFIG_HOME}'):
        args.config = args.config.replace('${XDG_CONFIG_HOME}',
                                          os.path.expanduser('~/.config'), 1)
    args.config = os.path.abspath(args.config)

    args.log_file = os.path.expandvars(args.log_file)
    if args.log_file.startswith('${XDG_DATA_HOME}'):
        args.log_file = args.log_file.replace(
            '${XDG_DATA_HOME}', os.path.expanduser('~/.local/share'), 1)
    args.log_file = os.path.abspath(args.log_file)

    #===========================================================================
    # Logging
    #===========================================================================

    # Create parent folders if file does not exist
    try:
        os.stat(args.log_file)
    except OSError:
        os.makedirs(os.path.dirname(args.log_file))

    # Logging configuration
    log.basicConfig(
        format='%(asctime)s - %(levelname)s: %(message)s',
        filename=args.log_file,
        filemode='a', level=args.log_level
    )

    log_handler = log.StreamHandler()
    log_handler.setLevel(args.log_level)
    log_handler.setFormatter(log.Formatter('%(levelname)s: %(module)s: '
                                           '%(message)s'))

    log.getLogger().addHandler(log_handler)

    # Start program
    log.info('Started')

    #===========================================================================
    # Config file
    #===========================================================================
    try:
        file_stat = os.stat(args.config)

        if (stat.S_IRGRP | stat.S_IROTH) & file_stat.st_mode != 0:
            log.critical('config file "%s" is group- or world-readable. Please '
                         '`chmod 400` or similar.', args.config)
            sys.exit(2)
    except OSError as e:
        if e.errno != 2:
            log.critical('file stat error - %s', e)
            sys.exit(1)
        else:
            log.warn('config file "%s" does not exist', args.config)

    config = ConfigParser()
    config.read_string('''
    [general]
    backends=dummy
    watchers=
    [sms-modem]
    number=
    port=
    baudrate=115200
    [otp]
    command=
    ''')

    # Read config file
    config.read(args.config)

    critical_error = False

    # Exit if there are config values missing
    if len(config.get('sms-modem', 'number')) == 0:
        log.error('no sms recipient specified')
        critical_error = True
    elif not config.get('sms-modem', 'number').startswith('+'):
        log.error('sms recipient numbers has to be international')
        critical_error = True

    if len(config.get('sms-modem', 'port')) == 0:
        log.error('no modem port specified')
        critical_error = True

    if len(config.get('otp', 'command')) == 0:
        log.error('no otp command specified')
        critical_error = True

    if critical_error:
        log.critical('critical errors with missing config options - exiting')
        sys.exit(1)

    #===========================================================================
    # The program
    #===========================================================================

    # Initialize backends
    #---------------------------------------------------------------------------
    try:
        for backend in config.get('general', 'backends').split():
            classname = re.sub(r'[^a-z]', '', backend.lower()) + 'backend'
            log.debug('Found backend "%s" -> class "%s"', backend, classname)
            for subclass in Backend.__subclasses__():
                if subclass.__name__.lower() == classname:
                    try:
                        options = dict(config.items(backend))
                    except:
                        options = dict()
                    log.debug('Creating "%s"', subclass.__name__)
                    subclass(**options)
                    break

    # Initialize watchers
    #---------------------------------------------------------------------------
        for watcher in config.get('general', 'watchers').split():
            classname = re.sub(r'[^a-z]', '', watcher.lower()) + 'watcher'
            log.debug('Found watcher "%s" -> class "%s"', watcher, classname)
            for subclass in Watcher.__subclasses__():
                if subclass.__name__.lower() == classname:
                    try:
                        options = dict(config.items(watcher))
                    except:
                        options = dict()
                    log.debug('Creating "%s"', subclass.__name__)
                    subclass(**options)
                    break

        # Wait for all watchers to end
        Watcher.join()

    except KeyboardInterrupt:
        log.warn('Received keyboard interrupt - shutting down')
        Watcher.kill()
        sys.exit(1)

    finally:
        Backend.end()


if __name__ == '__main__':
    main()
